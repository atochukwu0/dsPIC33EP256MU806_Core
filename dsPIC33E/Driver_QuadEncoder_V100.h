// Author			: Fabian Kung
// Date				: 27 Feb 2017
// Filename			: Driver_QuadEncoder_V100.h

#ifndef _DRIVER_QUADENCODER_dsPIC33_H
#define _DRIVER_QUADENCODER_dsPIC33_H

// Include common header to all drivers and sources.  Here absolute path is used.
// To edit if one change folder
#include "osmain.h"

// 
//
// --- PUBLIC VARIABLES ---
//

extern  float       gfOmegaLW;              // Rotation velocity of left wheel in rotation/sec.
extern  float       gfOmegaRW;              // Rotation velocity of right wheel in rotation/sec.
extern  float       gfOmegaW;               // Average velocity of both wheels in rotation/sec.
extern  long        gnDistanceMoveLW;        // Distance traveled by left wheel in no. of ticks.
extern  long        gnDistanceMoveRW;        // Distance traveled by right wheel in no. of ticks.
extern  long        gnDistanceMoveW;         // Average distance traveled by both wheels in no. of ticks.
extern  int         gnHeading;               // This indicates the direction, essentially the difference between right and left 
                                            // wheel distance.  Facing right if > 0, and facing left if < 0.
typedef struct StructProceQuadEncoder
{
    int         nQuadEncoderStatus;     // 0 - Reset.  
                                        // Otherwise - Ready.
                                        // Note: User process can reset the quadrature encoder by setting this
                                        // global variable to 0.  Reseting the quadrature encoder also initialize
                                        // all the velocity and distance variables.
    unsigned int unGearRatio;           // Gear ratio for gearbox connected to motor shaft. 
                                        // Note: If we wish to measure actual motor shaft speed, we should
                                        // set this to 1.
    unsigned int unEncoder_CPR;         // Rotational encoder's count pulse per rotation, 
                                        // For instance for Pololu magnetic encoder for micro-metal DC gear motor,
                                        // this is 12 count-per-rotation.  For my DIY optical encoder with 20 teeths,
                                        // this is 20 count-per-rotation.
    unsigned int unEncoder_Div;         // Quadrature encoder division ratio. Valid value is 1, 2, 4, 8, 16, 32 and 64. 
                                        // We use this parameter to set the no. of ticks per rotation of the wheel. 
                                        // This parameter is used in conjuction with unGearRatio and unEncoder_CPR.
                                        // For instance for a gear dc motor with:
                                        // a) Motor shaft mounted encoder with 12 CPR.
                                        // b) Gear ratio 100:1
                                        // c) unEncoder_DIV = 16.
                                        // Then for each turn of the wheel, 12*100 = 1200 pulses will be generated by
                                        // the quadrature encoder.  This will be divided by 16, thus the effective 
                                        // pulse per rotation of the wheel is 1200/16 = 75 ticks per wheel rotation.
                                        // From experiments, recommends this value to be between 60 to 160.
    
} DSPIC33E_QEI_DRIVER;

#define     _QUADENCODER_RESET      0
#define     _QUADENDCODER_READY     1
#define     _QUADENCODER_POWERUP    -1

extern  DSPIC33E_QEI_DRIVER    gobjDriverQuadEncoder;

//
// --- PUBLIC FUNCTION PROTOTYPE ---
//
void Proce_QuadEncoder_Driver(TASK_ATTRIBUTE *);

#endif
